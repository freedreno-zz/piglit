# Test generated by:
# ../../../glsl-1.10/variable-index-read.sh 1.20

[require]
GLSL >= 1.20

[vertex shader]
uniform int col;
uniform vec4 expect;
varying mat4x4 m;
varying vec4 color;

void main()
{
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

    m = mat4x4(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0);

    /* From page 23 (page 30 of the PDF) of the GLSL 1.10 spec:
     *
     *     "A vertex shader may also read varying variables, getting back the
     *     same values it has written. Reading a varying variable in a vertex
     *     shader returns undefined values if it is read before being
     *     written."
     */
    color = (m[col] == expect)
        ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
}

[fragment shader]
uniform int col;
uniform vec4 expect;
varying mat4x4 m;
varying vec4 color;

void main()
{
    /* There is some trickery here.  The fragment shader has to actually use
     * the varyings generated by the vertex shader, or the compiler (more
     * likely the linker) might demote the varying outputs to just be vertex
     * shader global variables.  Since the point of the test is the vertex
     * shader reading from a varying, that would defeat the test.
     */
    gl_FragColor = (m[col] == expect)
        ? color : vec4(1.0, 0.0, 0.0, 1.0);
}

[test]
clear color 0.5 0.5 0.5 0.5
clear
ortho

uniform int col 0
uniform vec4 expect 1 2 3 4
draw rect 5 5 10 10
probe rgb 10 10 0.0 1.0 0.0

uniform int col 1
uniform vec4 expect 5 6 7 8
draw rect 20 5 10 10
probe rgb 25 10 0.0 1.0 0.0

uniform int col 2
uniform vec4 expect 9 10 11 12
draw rect 35 5 10 10
probe rgb 40 10 0.0 1.0 0.0

uniform int col 3
uniform vec4 expect 13 14 15 16
draw rect 50 5 10 10
probe rgb 55 10 0.0 1.0 0.0
