[require]
GLSL >= 1.00 es
GL >= 2.0 es

[vertex shader]
attribute vec4 vertex;
mat4 proj = mat4(
	2.0/250.0, 0.0, 0.0, -1.0,
	0.0, 2.0/250.0, 0.0, -1.0,
	0.0, 0.0, -1.0, 0.0,
	0.0, 0.0, 0.0, 1.0);

void main() { gl_Position = vertex;
	gl_Position *= proj; }

[fragment shader]
/* From page 43 (page 49 of the PDF) of the GLSL 1.20 spec:
 *
 *     "If an exact match is found, the other signatures are ignored, and the
 *     exact match is used. Otherwise, if no exact match is found, then the
 *     implicit conversions in Section 4.1.10 "Implicit Conversions" will be
 *     applied to the calling arguments if this can make their types match a
 *     signature."
 *
 * From page 20 (page 26 of the PDF) of the GLSL 1.20 spec:
 *
 *     "In some situations, an expression and its type will be implicitly
 *     converted to a different type. The following table shows all allowed
 *     implicit conversions:
 *
 *         Type of expression    Can be implicitly converted to
 *               int                         float
 *              ivec2                         vec2
 *              ivec3                         vec3
 *              ivec4                         vec4"
 */

uniform ivec3 c;
uniform ivec3 r;
uniform mat3 expected;

void main() {
  mat3 result = outerProduct(c, r);
  gl_FragColor = (result == expected) ? vec4(0, 1, 0, 1) : vec4(1, 0, 0, 1);
}

[test]
clear color 0.5 0.5 0.5 0.0
clear


uniform ivec3 c  2 3 4
uniform ivec3 r  5 6 7
uniform mat3x3 expected  10 15 20 12 18 24 14 21 28
draw rect 10 10 10 10
probe rgb 15 15 0.0 1.0 0.0

uniform ivec3 c  3 4 5
uniform ivec3 r  6 7 8
uniform mat3x3 expected  18 24 30 21 28 35 24 32 40
draw rect 30 10 10 10
probe rgb 35 15 0.0 1.0 0.0

uniform ivec3 c  4 5 6
uniform ivec3 r  7 8 9
uniform mat3x3 expected  28 35 42 32 40 48 36 45 54
draw rect 50 10 10 10
probe rgb 55 15 0.0 1.0 0.0

uniform ivec3 c  5 6 7
uniform ivec3 r  8 9 10
uniform mat3x3 expected  40 48 56 45 54 63 50 60 70
draw rect 70 10 10 10
probe rgb 75 15 0.0 1.0 0.0
